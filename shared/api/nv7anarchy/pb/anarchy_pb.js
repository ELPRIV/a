// source: anarchy.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.anarchy.AnarchyCombination', null, global);
goog.exportSymbol('proto.anarchy.AnarchyCombinationResult', null, global);
goog.exportSymbol('proto.anarchy.AnarchyElement', null, global);
goog.exportSymbol('proto.anarchy.AnarchyElementCreate', null, global);
goog.exportSymbol('proto.anarchy.AnarchyGetAllChunk', null, global);
goog.exportSymbol('proto.anarchy.AnarchyInventory', null, global);
goog.exportSymbol('proto.anarchy.AnarchyRecentCombination', null, global);
goog.exportSymbol('proto.anarchy.AnarchyRecents', null, global);
goog.exportSymbol('proto.anarchy.AnarchyUserRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anarchy.AnarchyElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anarchy.AnarchyElement.repeatedFields_, null);
};
goog.inherits(proto.anarchy.AnarchyElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anarchy.AnarchyElement.displayName = 'proto.anarchy.AnarchyElement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anarchy.AnarchyCombination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anarchy.AnarchyCombination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anarchy.AnarchyCombination.displayName = 'proto.anarchy.AnarchyCombination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anarchy.AnarchyCombinationResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anarchy.AnarchyCombinationResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anarchy.AnarchyCombinationResult.displayName = 'proto.anarchy.AnarchyCombinationResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anarchy.AnarchyInventory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anarchy.AnarchyInventory.repeatedFields_, null);
};
goog.inherits(proto.anarchy.AnarchyInventory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anarchy.AnarchyInventory.displayName = 'proto.anarchy.AnarchyInventory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anarchy.AnarchyUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anarchy.AnarchyUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anarchy.AnarchyUserRequest.displayName = 'proto.anarchy.AnarchyUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anarchy.AnarchyGetAllChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anarchy.AnarchyGetAllChunk.repeatedFields_, null);
};
goog.inherits(proto.anarchy.AnarchyGetAllChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anarchy.AnarchyGetAllChunk.displayName = 'proto.anarchy.AnarchyGetAllChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anarchy.AnarchyRecentCombination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anarchy.AnarchyRecentCombination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anarchy.AnarchyRecentCombination.displayName = 'proto.anarchy.AnarchyRecentCombination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anarchy.AnarchyRecents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anarchy.AnarchyRecents.repeatedFields_, null);
};
goog.inherits(proto.anarchy.AnarchyRecents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anarchy.AnarchyRecents.displayName = 'proto.anarchy.AnarchyRecents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anarchy.AnarchyElementCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anarchy.AnarchyElementCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anarchy.AnarchyElementCreate.displayName = 'proto.anarchy.AnarchyElementCreate';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anarchy.AnarchyElement.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anarchy.AnarchyElement.prototype.toObject = function(opt_includeInstance) {
  return proto.anarchy.AnarchyElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anarchy.AnarchyElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    color: jspb.Message.getFieldWithDefault(msg, 1, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createdon: jspb.Message.getFieldWithDefault(msg, 3, 0),
    creator: jspb.Message.getFieldWithDefault(msg, 4, ""),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    parentsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    uses: jspb.Message.getFieldWithDefault(msg, 8, 0),
    foundby: jspb.Message.getFieldWithDefault(msg, 9, 0),
    complexity: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anarchy.AnarchyElement}
 */
proto.anarchy.AnarchyElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anarchy.AnarchyElement;
  return proto.anarchy.AnarchyElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anarchy.AnarchyElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anarchy.AnarchyElement}
 */
proto.anarchy.AnarchyElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedon(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreator(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addParents(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUses(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFoundby(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setComplexity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anarchy.AnarchyElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anarchy.AnarchyElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anarchy.AnarchyElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreatedon();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCreator();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getParentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getUses();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getFoundby();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getComplexity();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional string Color = 1;
 * @return {string}
 */
proto.anarchy.AnarchyElement.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyElement} returns this
 */
proto.anarchy.AnarchyElement.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Comment = 2;
 * @return {string}
 */
proto.anarchy.AnarchyElement.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyElement} returns this
 */
proto.anarchy.AnarchyElement.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 CreatedOn = 3;
 * @return {number}
 */
proto.anarchy.AnarchyElement.prototype.getCreatedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.anarchy.AnarchyElement} returns this
 */
proto.anarchy.AnarchyElement.prototype.setCreatedon = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string Creator = 4;
 * @return {string}
 */
proto.anarchy.AnarchyElement.prototype.getCreator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyElement} returns this
 */
proto.anarchy.AnarchyElement.prototype.setCreator = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Name = 5;
 * @return {string}
 */
proto.anarchy.AnarchyElement.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyElement} returns this
 */
proto.anarchy.AnarchyElement.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string Parents = 6;
 * @return {!Array<string>}
 */
proto.anarchy.AnarchyElement.prototype.getParentsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anarchy.AnarchyElement} returns this
 */
proto.anarchy.AnarchyElement.prototype.setParentsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anarchy.AnarchyElement} returns this
 */
proto.anarchy.AnarchyElement.prototype.addParents = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anarchy.AnarchyElement} returns this
 */
proto.anarchy.AnarchyElement.prototype.clearParentsList = function() {
  return this.setParentsList([]);
};


/**
 * optional int64 Uses = 8;
 * @return {number}
 */
proto.anarchy.AnarchyElement.prototype.getUses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.anarchy.AnarchyElement} returns this
 */
proto.anarchy.AnarchyElement.prototype.setUses = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 FoundBy = 9;
 * @return {number}
 */
proto.anarchy.AnarchyElement.prototype.getFoundby = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.anarchy.AnarchyElement} returns this
 */
proto.anarchy.AnarchyElement.prototype.setFoundby = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 Complexity = 10;
 * @return {number}
 */
proto.anarchy.AnarchyElement.prototype.getComplexity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.anarchy.AnarchyElement} returns this
 */
proto.anarchy.AnarchyElement.prototype.setComplexity = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anarchy.AnarchyCombination.prototype.toObject = function(opt_includeInstance) {
  return proto.anarchy.AnarchyCombination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anarchy.AnarchyCombination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyCombination.toObject = function(includeInstance, msg) {
  var f, obj = {
    elem1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    elem2: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anarchy.AnarchyCombination}
 */
proto.anarchy.AnarchyCombination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anarchy.AnarchyCombination;
  return proto.anarchy.AnarchyCombination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anarchy.AnarchyCombination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anarchy.AnarchyCombination}
 */
proto.anarchy.AnarchyCombination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setElem1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setElem2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anarchy.AnarchyCombination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anarchy.AnarchyCombination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anarchy.AnarchyCombination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyCombination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElem1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getElem2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string elem1 = 1;
 * @return {string}
 */
proto.anarchy.AnarchyCombination.prototype.getElem1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyCombination} returns this
 */
proto.anarchy.AnarchyCombination.prototype.setElem1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string elem2 = 2;
 * @return {string}
 */
proto.anarchy.AnarchyCombination.prototype.getElem2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyCombination} returns this
 */
proto.anarchy.AnarchyCombination.prototype.setElem2 = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anarchy.AnarchyCombinationResult.prototype.toObject = function(opt_includeInstance) {
  return proto.anarchy.AnarchyCombinationResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anarchy.AnarchyCombinationResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyCombinationResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, ""),
    exists: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anarchy.AnarchyCombinationResult}
 */
proto.anarchy.AnarchyCombinationResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anarchy.AnarchyCombinationResult;
  return proto.anarchy.AnarchyCombinationResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anarchy.AnarchyCombinationResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anarchy.AnarchyCombinationResult}
 */
proto.anarchy.AnarchyCombinationResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExists(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anarchy.AnarchyCombinationResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anarchy.AnarchyCombinationResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anarchy.AnarchyCombinationResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyCombinationResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExists();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.anarchy.AnarchyCombinationResult.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyCombinationResult} returns this
 */
proto.anarchy.AnarchyCombinationResult.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool exists = 2;
 * @return {boolean}
 */
proto.anarchy.AnarchyCombinationResult.prototype.getExists = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.anarchy.AnarchyCombinationResult} returns this
 */
proto.anarchy.AnarchyCombinationResult.prototype.setExists = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anarchy.AnarchyInventory.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anarchy.AnarchyInventory.prototype.toObject = function(opt_includeInstance) {
  return proto.anarchy.AnarchyInventory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anarchy.AnarchyInventory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyInventory.toObject = function(includeInstance, msg) {
  var f, obj = {
    foundList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anarchy.AnarchyInventory}
 */
proto.anarchy.AnarchyInventory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anarchy.AnarchyInventory;
  return proto.anarchy.AnarchyInventory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anarchy.AnarchyInventory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anarchy.AnarchyInventory}
 */
proto.anarchy.AnarchyInventory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anarchy.AnarchyInventory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anarchy.AnarchyInventory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anarchy.AnarchyInventory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyInventory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFoundList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string Found = 1;
 * @return {!Array<string>}
 */
proto.anarchy.AnarchyInventory.prototype.getFoundList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.anarchy.AnarchyInventory} returns this
 */
proto.anarchy.AnarchyInventory.prototype.setFoundList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.anarchy.AnarchyInventory} returns this
 */
proto.anarchy.AnarchyInventory.prototype.addFound = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anarchy.AnarchyInventory} returns this
 */
proto.anarchy.AnarchyInventory.prototype.clearFoundList = function() {
  return this.setFoundList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anarchy.AnarchyUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.anarchy.AnarchyUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anarchy.AnarchyUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    element: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anarchy.AnarchyUserRequest}
 */
proto.anarchy.AnarchyUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anarchy.AnarchyUserRequest;
  return proto.anarchy.AnarchyUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anarchy.AnarchyUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anarchy.AnarchyUserRequest}
 */
proto.anarchy.AnarchyUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setElement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anarchy.AnarchyUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anarchy.AnarchyUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anarchy.AnarchyUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getElement();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.anarchy.AnarchyUserRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyUserRequest} returns this
 */
proto.anarchy.AnarchyUserRequest.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string element = 2;
 * @return {string}
 */
proto.anarchy.AnarchyUserRequest.prototype.getElement = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyUserRequest} returns this
 */
proto.anarchy.AnarchyUserRequest.prototype.setElement = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anarchy.AnarchyGetAllChunk.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anarchy.AnarchyGetAllChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.anarchy.AnarchyGetAllChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anarchy.AnarchyGetAllChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyGetAllChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.anarchy.AnarchyElement.toObject, includeInstance),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anarchy.AnarchyGetAllChunk}
 */
proto.anarchy.AnarchyGetAllChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anarchy.AnarchyGetAllChunk;
  return proto.anarchy.AnarchyGetAllChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anarchy.AnarchyGetAllChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anarchy.AnarchyGetAllChunk}
 */
proto.anarchy.AnarchyGetAllChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anarchy.AnarchyElement;
      reader.readMessage(value,proto.anarchy.AnarchyElement.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anarchy.AnarchyGetAllChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anarchy.AnarchyGetAllChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anarchy.AnarchyGetAllChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyGetAllChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.anarchy.AnarchyElement.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated AnarchyElement Elements = 1;
 * @return {!Array<!proto.anarchy.AnarchyElement>}
 */
proto.anarchy.AnarchyGetAllChunk.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.anarchy.AnarchyElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.anarchy.AnarchyElement, 1));
};


/**
 * @param {!Array<!proto.anarchy.AnarchyElement>} value
 * @return {!proto.anarchy.AnarchyGetAllChunk} returns this
*/
proto.anarchy.AnarchyGetAllChunk.prototype.setElementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.anarchy.AnarchyElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.anarchy.AnarchyElement}
 */
proto.anarchy.AnarchyGetAllChunk.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.anarchy.AnarchyElement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anarchy.AnarchyGetAllChunk} returns this
 */
proto.anarchy.AnarchyGetAllChunk.prototype.clearElementsList = function() {
  return this.setElementsList([]);
};


/**
 * optional int64 count = 2;
 * @return {number}
 */
proto.anarchy.AnarchyGetAllChunk.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.anarchy.AnarchyGetAllChunk} returns this
 */
proto.anarchy.AnarchyGetAllChunk.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anarchy.AnarchyRecentCombination.prototype.toObject = function(opt_includeInstance) {
  return proto.anarchy.AnarchyRecentCombination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anarchy.AnarchyRecentCombination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyRecentCombination.toObject = function(includeInstance, msg) {
  var f, obj = {
    elem1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    elem2: jspb.Message.getFieldWithDefault(msg, 2, ""),
    elem3: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anarchy.AnarchyRecentCombination}
 */
proto.anarchy.AnarchyRecentCombination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anarchy.AnarchyRecentCombination;
  return proto.anarchy.AnarchyRecentCombination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anarchy.AnarchyRecentCombination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anarchy.AnarchyRecentCombination}
 */
proto.anarchy.AnarchyRecentCombination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setElem1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setElem2(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setElem3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anarchy.AnarchyRecentCombination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anarchy.AnarchyRecentCombination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anarchy.AnarchyRecentCombination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyRecentCombination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElem1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getElem2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getElem3();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string Elem1 = 1;
 * @return {string}
 */
proto.anarchy.AnarchyRecentCombination.prototype.getElem1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyRecentCombination} returns this
 */
proto.anarchy.AnarchyRecentCombination.prototype.setElem1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Elem2 = 2;
 * @return {string}
 */
proto.anarchy.AnarchyRecentCombination.prototype.getElem2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyRecentCombination} returns this
 */
proto.anarchy.AnarchyRecentCombination.prototype.setElem2 = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Elem3 = 3;
 * @return {string}
 */
proto.anarchy.AnarchyRecentCombination.prototype.getElem3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyRecentCombination} returns this
 */
proto.anarchy.AnarchyRecentCombination.prototype.setElem3 = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anarchy.AnarchyRecents.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anarchy.AnarchyRecents.prototype.toObject = function(opt_includeInstance) {
  return proto.anarchy.AnarchyRecents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anarchy.AnarchyRecents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyRecents.toObject = function(includeInstance, msg) {
  var f, obj = {
    recentsList: jspb.Message.toObjectList(msg.getRecentsList(),
    proto.anarchy.AnarchyRecentCombination.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anarchy.AnarchyRecents}
 */
proto.anarchy.AnarchyRecents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anarchy.AnarchyRecents;
  return proto.anarchy.AnarchyRecents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anarchy.AnarchyRecents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anarchy.AnarchyRecents}
 */
proto.anarchy.AnarchyRecents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anarchy.AnarchyRecentCombination;
      reader.readMessage(value,proto.anarchy.AnarchyRecentCombination.deserializeBinaryFromReader);
      msg.addRecents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anarchy.AnarchyRecents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anarchy.AnarchyRecents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anarchy.AnarchyRecents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyRecents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.anarchy.AnarchyRecentCombination.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AnarchyRecentCombination Recents = 1;
 * @return {!Array<!proto.anarchy.AnarchyRecentCombination>}
 */
proto.anarchy.AnarchyRecents.prototype.getRecentsList = function() {
  return /** @type{!Array<!proto.anarchy.AnarchyRecentCombination>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.anarchy.AnarchyRecentCombination, 1));
};


/**
 * @param {!Array<!proto.anarchy.AnarchyRecentCombination>} value
 * @return {!proto.anarchy.AnarchyRecents} returns this
*/
proto.anarchy.AnarchyRecents.prototype.setRecentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.anarchy.AnarchyRecentCombination=} opt_value
 * @param {number=} opt_index
 * @return {!proto.anarchy.AnarchyRecentCombination}
 */
proto.anarchy.AnarchyRecents.prototype.addRecents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.anarchy.AnarchyRecentCombination, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anarchy.AnarchyRecents} returns this
 */
proto.anarchy.AnarchyRecents.prototype.clearRecentsList = function() {
  return this.setRecentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anarchy.AnarchyElementCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.anarchy.AnarchyElementCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anarchy.AnarchyElementCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyElementCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    elem1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    elem2: jspb.Message.getFieldWithDefault(msg, 2, ""),
    elem3: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    color: jspb.Message.getFieldWithDefault(msg, 5, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anarchy.AnarchyElementCreate}
 */
proto.anarchy.AnarchyElementCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anarchy.AnarchyElementCreate;
  return proto.anarchy.AnarchyElementCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anarchy.AnarchyElementCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anarchy.AnarchyElementCreate}
 */
proto.anarchy.AnarchyElementCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setElem1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setElem2(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setElem3(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anarchy.AnarchyElementCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anarchy.AnarchyElementCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anarchy.AnarchyElementCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anarchy.AnarchyElementCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElem1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getElem2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getElem3();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string Elem1 = 1;
 * @return {string}
 */
proto.anarchy.AnarchyElementCreate.prototype.getElem1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyElementCreate} returns this
 */
proto.anarchy.AnarchyElementCreate.prototype.setElem1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Elem2 = 2;
 * @return {string}
 */
proto.anarchy.AnarchyElementCreate.prototype.getElem2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyElementCreate} returns this
 */
proto.anarchy.AnarchyElementCreate.prototype.setElem2 = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Elem3 = 3;
 * @return {string}
 */
proto.anarchy.AnarchyElementCreate.prototype.getElem3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyElementCreate} returns this
 */
proto.anarchy.AnarchyElementCreate.prototype.setElem3 = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Uid = 4;
 * @return {string}
 */
proto.anarchy.AnarchyElementCreate.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyElementCreate} returns this
 */
proto.anarchy.AnarchyElementCreate.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Color = 5;
 * @return {string}
 */
proto.anarchy.AnarchyElementCreate.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyElementCreate} returns this
 */
proto.anarchy.AnarchyElementCreate.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string Comment = 6;
 * @return {string}
 */
proto.anarchy.AnarchyElementCreate.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.anarchy.AnarchyElementCreate} returns this
 */
proto.anarchy.AnarchyElementCreate.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


goog.object.extend(exports, proto.anarchy);
